import { APIResponse, test, expect } from '@playwright/test';
import { request } from 'http';
import { url } from 'inspector';
import { AddArticleAPI } from 'pom/api/lesson11/add-article-pom-api';
import { AddCommentAPI } from 'pom/api/lesson11/add-comment-pom-api';
import { RegisterAPI } from 'pom/api/lesson11/btvn-lesson11-register-pom-api';
import { LoginAPI } from 'pom/api/lesson11/login-pom-api';
import { title } from 'process';

const baseURL: string = "https://conduit-api.bondaracademy.com";
let token: string = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjozNjY5NH0sImlhdCI6MTc2MDAwMTQxNSwiZXhwIjoxNzY1MTg1NDE1fQ.uX_d3cbhE5I9GfMcv1-fLswqThGWPxR5RssgsEKuK8c';

function generateRandomData() {
    const random = Math.floor(Math.random() * 10000);
    const username = `K17_username_${random}`;
    const email = `nguyenhienit_${random}@gmail.com`;
    const password = `Gaonho@1512${random}`;
    return { email, username, password };
}

let registeredEmail = '';
let registeredUsername = '';
let registeredPassword = '';

let slug = '';
let listSlug: string[] = [];
let listIdComment: string[] = [];

let registerAPI: RegisterAPI;
let loginAPI: LoginAPI;
let addArticleAPI: AddArticleAPI;
let addCommentAPI: AddCommentAPI;


test.describe('BTVN lesson 11', () => {
    test('üöÄ  End - to - End', async ({ request }) => {

        //TC1: ƒêƒÉng k√Ω t√†i kho·∫£n
        await test.step('üöÄ  Testcase 01: ƒêƒÉng k√Ω t√†i kho·∫£n', async () => {
            registerAPI = new RegisterAPI(request);

            for (let i = 1; i <= 1; i++) {
                const { email, password, username } = generateRandomData();
                try {
                    const response: APIResponse = await registerAPI.UserRegister(email, password, username);

                    console.log(`üü¢  Testcase1: ƒêƒÉng k√Ω t√†i kho·∫£n => g·ª≠i l·∫ßn: ${i}: ${email},  ${username},  ${password}`);

                    // //verify statusCode
                    // expect(response.status()).toBe(201);

                    // //verify response body
                    // const responseBody = await response.json();
                    // const actualEmail: string = responseBody['user']['email'];
                    // const actualUserName: string = responseBody['user']['username'];

                    // expect(actualEmail).toBe(email);
                    // expect(actualUserName).toBe(username);

                    const statusCode: number = response.status();
                    const responseBody = await response.json();

                    console.log(`üì© Status: ${statusCode}`)
                    console.log(`Response body: ${JSON.stringify(responseBody, null, 2)}`);

                    if (statusCode === 201) {
                        console.log(`‚úÖ  ƒêƒÉng k√Ω l·∫ßn ${i} th√†nh c√¥ng: username: ${username}, password: ${password}, email: ${email}`)
                    } else {
                        console.log(`‚ùå  ƒêƒÉng k√Ω l·∫ßn ${i} th·∫•t b·∫°i: username: ${username}, password: ${password}, email: ${email}`)
                    }

                    expect(statusCode).toBe(201);
                    expect(responseBody.user.email).toBe(email);
                    expect(responseBody.user.username).toBe(username);

                    registeredEmail = email;
                    registeredPassword = password;
                    registeredUsername = username;


                } catch (err) {
                    console.log(`‚ùå  Error: ${err}`);
                    throw err;
                }
            };
        });

        //2.Test 2: 
        //ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n ƒë√£ t·∫°o ·ªü test 1
        await test.step('üöÄ  Testcase 02 - 02.1: Login article', async () => {

            loginAPI = new LoginAPI(request);
            const response: APIResponse = await loginAPI.UserLogin(registeredEmail, registeredPassword);

            const statusCode = response.status();
            //verify l·∫°i xem k·∫øt qu·∫£ status code ƒë√∫ng hay kh√¥ng
            expect(statusCode).toBe(200);//.toBe d√πng cho con s·ªë ho·∫∑c ch·ªØ m√† k c·∫ßn await nhi·ªÅu, th∆∞·ªùng d√πng cho API 
            console.log(`üü¢  status code: ${response.status()}`);

            //L·∫•y token ra ƒë·ªÉ s·ª≠ d·ª•ng cho nh∆∞ng api kh√°c c·∫ßn token
            //ph·∫£i c√≥ await th√¨ m·ªõi c√≥ data v√† kh√¥ng b·ªã l·ªói 
            token = (await response.json()).user.token;//tr·∫£ v·ªÅ cho 1 c√°i chu·ªói .(.user.token l√† ƒëang l·∫•y ·ªü response khi ch·∫°y API)
            //Verify token ƒë·ªÉ kh√¥ng b·ªã null ho·∫∑c k r·ªóng do token c√≥ th·ªÉ ƒë·ªông => defin ed r√µ r√†ng ƒë∆∞·ª£c token
            expect(token).toBeDefined();
            console.log(`token: ${token}`);
            //In ra 20 k√≠ t·ª± ƒë·∫ßu ti√™n c·ªßa token n·∫øu kh√¥ng mu·ªën in to√†n b·ªô token th√¨ s·∫Ω d√πng c√¢u l·ªánh n√†y 
            console.log(`üü¢  Logged in successfully, token: ${token.substring(0, 20)}...`);
        });

        //Th√™m m·ªõi article:
        await test.step('üöÄ  Testcase 02 - 02.2: Th√™m m·ªõi article', async () => {
            const random = Math.floor(Math.random() * 100000000000000);
            const articleName = `API in Playwright ${random}`;
            const articleAbout = `How to use Playwright to create article ${random}`;
            const articleTags = ` Playwright Viet Nam, pw, pw-k17 ${random}`;
            const articleBody = ` N·ªôi dung m√¥ t·∫£ l·∫ßn: ${random}`;

            addArticleAPI = new AddArticleAPI(request, token);
            for (let i = 1; i <= 1; i++) {
                try {
                    const response: APIResponse = await addArticleAPI.AddArticle(articleName, articleAbout, articleBody, articleTags);
                    const statusCode: number = response.status();
                    const responseBody = await response.json();
                    slug = responseBody.article.slug;
                    console.log(`‚úÖ G√°n slug to√†n c·ª•c: ${slug}`);

                    console.log(`üì©  Status: ${statusCode}`)
                    console.log(`üìÑ  Response body: ${JSON.stringify(responseBody, null, 2)}`);

                    if (statusCode === 201) {
                        console.log(`‚úÖ  Th√™m m·ªõi l·∫ßn ${i} th√†nh c√¥ng: : articleAbout: ${articleAbout}, articleBody: ${articleBody}, articleName: ${articleName}, articleTags: ${articleTags}`)
                    } else {
                        console.log(`‚ùå  Th√™m m·ªõi l·∫ßn ${i}  th·∫•t b·∫°i: articleAbout: ${articleAbout}, articleBody: ${articleBody}, articleName: ${articleName}, articleTags: ${articleTags}`)
                    }

                    expect(statusCode).toBe(201);

                    const { title } = responseBody;
                    console.log(slug);
                    console.log(title);
                } catch (err) {
                    console.log(`‚ùå  Error: ${err}`);
                    throw err;
                }
            };
        });

        //3.  Test 3: Th√™m m·ªõi 5 comment v·ªõi n·ªôi dung: ‚ÄúComment 01‚Äù, ‚ÄúComment 02‚Äù, ‚ÄúComment 03‚Äù, ‚ÄúComment 04‚Äù, ‚ÄúComment 05‚Äù v√†o article ƒë√£ t·∫°o ·ªü test 2. 
        await test.step('üöÄ  Testcase 03: Add 5 comments', async () => {
            console.log("üîë Token hi·ªán t·∫°i:", token);
            console.log("üß© Slug hi·ªán t·∫°i:", slug);

            if (!slug || !token) {
                throw new Error("‚ùå Thi·∫øu slug ho·∫∑c token! H√£y ki·ªÉm tra l·∫°i Testcase 1 v√† 2 tr∆∞·ªõc ƒë√≥.");
            }

            addCommentAPI = new AddCommentAPI(request, token);

            for (let i = 1; i <= 5; i++) {
                const commentBody = `Comment 0${i}`;
                console.log(`üü¢  G·ª≠i comment l·∫ßn ${i}: ${commentBody}`);

                const response: APIResponse = await addCommentAPI.AddComment(slug, commentBody);
                const statusCode = response.status();
                const responseBody = await response.json();

                console.log(`üì©  Status: ${statusCode}`);
                console.log(`üìÑ  Response body: ${JSON.stringify(responseBody, null, 2)}`);

                expect(statusCode).toBe(200);
                expect(responseBody.comment.body).toBe(commentBody);

                const actualCommentId = responseBody.comment.id;
                if (commentBody === 'Comment 02' || commentBody === 'Comment 05') {
                    listIdComment.push(actualCommentId);
                }

                console.log(`üìù  Add comment l·∫ßn ${i}: ${commentBody} (id: ${actualCommentId})`);
            }
        });

        //4. Test 4: Xo√° ‚ÄúComment 02‚Äù, ‚ÄúComment 05‚Äù ƒë√£ t·∫°o ·ªü test 3
        await test.step('Testcase 4: X√≥a comment 2 & comment 5', async () => {

            for (let i = 0; i < listIdComment.length; i++) {
                const url: string = `${baseURL}/api/articles/${slug}/comments/${listIdComment[i]}`;
                const response: APIResponse = await request.delete(url, {
                    headers: {
                        'authorization': `Token ${token}`,
                    },

                });
                console.log(`Delete comment ID: ${listIdComment}`)
                expect(response.status()).toBe(200);
            }
        });

        //5. Test 6: X√≥a article ƒë√£ t·∫°o ·ªü test02
        await test.step('Testcase 5: X√≥a article ƒë√£ t·∫°o', async () => {
            const url: string = `${baseURL}/api/articles/${slug}`
            const response: APIResponse = await request.delete(url, {
                headers: {
                    'authorization': `Token ${token}`,
                },
            })
            console.log(`Delete article slug: ${slug}`)
            expect(response.status()).toBe(204);
        });
    });
});





